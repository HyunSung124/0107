#카펫
# def solution(brown, yellow):
#     answer = []
#     yy = brown + yellow
#     gab = 0
#     while gab != yy:
#         for i in brown,yellow:
#             if brown * yellow == yy:
#                 answer.append(brown)
#                 break
#
#     return answer

#다른방법
# def solution(brown, yellow):
#     total = brown + yellow
#     for tx in range(3,total // 3 + 1):
#         ty = total // tx
#         if tx * ty == total and (tx - 2) * (ty - 2) == yellow:
#             return [max(tx,ty),min(tx,ty)]



#정렬알고리즘
# a = [1,2,3,4]
# def test(x):
#     x[0] = 500
# test(a)
# print(a)



# a = [1,2,3]
# b = [4,5,6]
# #id(object): id()함수는 object의 고유값(일련번호)를 리턴한다.
# print("a = ",id(a))
# print("b = ",id(b))
#
# b = a
# print("a = ",id(a))
# print("b = ",id(b))
# print(b)



#거품정렬
# List_A = [3,7,2,9,1,5,6,4,8]
# def Bubble_sort(_list:list):
#     for i in range(len(_list)-1):           # 반복 사이클은 원소 개수 -1번
#         for j in range(len(_list)-1 -i):    # 2개씩 비교하므로 -1,사이클마다 반복횟수 감소 -1
#             if _list[j] > _list[j+1]:
#                 tmp = _list[j]              # 교환하기 위한 빈 그릇 'tmp' 생성
#                 _list[j] = _list[j+1]
#                 _list[j+1] = tmp
#         print(_list)
# Bubble_sort(List_A)
# print(List_A)


#내림차순으로 만들기
# List_A = [3,7,2,9,1,5,6,4,8]
# def Bubble_sort(_list:list,reverse = False):
#     if reverse:
#         for i in range(len(_list)-1):
#             for j in range(len(_list)-1 -i):
#                 if _list[j] < _list[j+1]:
#                     tmp = _list[j]
#                     _list[j] = _list[j+1]
#                     _list[j+1] = tmp
#     else:
#         for i in range(len(_list) - 1):
#             for j in range(len(_list) - 1 - i):
#                 if _list[j] > _list[j + 1]:
#                     tmp = _list[j]
#                     _list[j] = _list[j + 1]
#                     _list[j + 1] = tmp
# Bubble_sort(List_A,reverse=True)
# print(List_A)


#선택정렬
# List_A = [3,7,2,9,1,5,6,4,8]
# def selection_sort(_list:list):
#     for i in range(len(_list)-1):
#         for j in range(len(_list)-1 -i):
#             if _list[i] > _list[j]:
#                 _list[i] = _list[j]
#             else:
#                 continue
# selection_sort(List_A)
# print(List_A)





# def Selection_sort(_list: list):
#     for i in range(len(_list) - 1):
#         minimum = i
#         for j in range(i + 1, len(_list)):
#             if _list[minimum] > _list[j]:
#                 minimum = j
#         tmp = _list[i]
#         _list[i] = _list[minimum]
#         _list[minimum] = tmp
# List_A = [3,7,2,9,1,5,6,4,8]
# Selection_sort(List_A)
# print(List_A)
